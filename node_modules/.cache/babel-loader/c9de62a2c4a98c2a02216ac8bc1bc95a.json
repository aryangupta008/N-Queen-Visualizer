{"ast":null,"code":"const CELL_COLOR_WHITE = \"#fff\";\nconst CELL_COLOR_BLACK = \"#000000\";\nexport function board(SIZE) {\n  let padding = 7;\n  let fontSize = 18;\n  document.getElementById(\"Board\").innerHTML = \"\";\n  document.getElementById(\"Iterations\").innerHTML = \"\";\n  const container = document.getElementById(\"Board\");\n  container.style.setProperty(\"--Qgrid-rows\", SIZE);\n  container.style.setProperty(\"--Qgrid-cols\", SIZE);\n\n  for (let j = 0; j < SIZE * SIZE; j++) {\n    let cell = document.createElement(\"div\");\n    let item = document.createElement(\"i\");\n    cell.appendChild(item).className = \"fas fa-crown\";\n    container.appendChild(cell).className = \"Qgrid-item q-array-tile\";\n  }\n\n  const arrayTiles = document.getElementsByClassName(\"q-array-tile\");\n  const crownsI = document.getElementsByClassName(\"fa-crown\");\n\n  for (let l = 0; l < arrayTiles.length; l++) {\n    arrayTiles[l].style.padding = `${padding}px`;\n    crownsI[l].style.fontSize = `${fontSize}px`;\n  }\n\n  var c = 0;\n\n  for (var a = 0; a < 8; a++) {\n    for (var b = 0; b < 8; b++) {\n      if ((a + b) % 2 == 0) {\n        arrayTiles[c].style.backgroundColor = CELL_COLOR_BLACK;\n        crownsI[c].style.color = CELL_COLOR_BLACK;\n        c++;\n      } else {\n        arrayTiles[c].style.backgroundColor = CELL_COLOR_WHITE;\n        crownsI[c].style.color = CELL_COLOR_WHITE;\n        c++;\n      }\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/aryan/OneDrive/Documents/GitHub/N-Queen-Visualiser-GfG/src/backTrackingAlgorithms/nQueens/board.js"],"names":["CELL_COLOR_WHITE","CELL_COLOR_BLACK","board","SIZE","padding","fontSize","document","getElementById","innerHTML","container","style","setProperty","j","cell","createElement","item","appendChild","className","arrayTiles","getElementsByClassName","crownsI","l","length","c","a","b","backgroundColor","color"],"mappings":"AAAA,MAAMA,gBAAgB,GAAG,MAAzB;AACA,MAAMC,gBAAgB,GAAG,SAAzB;AAEA,OAAO,SAASC,KAAT,CAAeC,IAAf,EAAqB;AAC1B,MAAIC,OAAO,GAAG,CAAd;AACA,MAAIC,QAAQ,GAAG,EAAf;AAEAC,EAAAA,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCC,SAAjC,GAA6C,EAA7C;AACAF,EAAAA,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCC,SAAtC,GAAkD,EAAlD;AAEA,QAAMC,SAAS,GAAGH,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAlB;AAEAE,EAAAA,SAAS,CAACC,KAAV,CAAgBC,WAAhB,CAA4B,cAA5B,EAA4CR,IAA5C;AACAM,EAAAA,SAAS,CAACC,KAAV,CAAgBC,WAAhB,CAA4B,cAA5B,EAA4CR,IAA5C;;AAEA,OAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,IAAI,GAAGA,IAA3B,EAAiCS,CAAC,EAAlC,EAAsC;AACpC,QAAIC,IAAI,GAAGP,QAAQ,CAACQ,aAAT,CAAuB,KAAvB,CAAX;AACA,QAAIC,IAAI,GAAGT,QAAQ,CAACQ,aAAT,CAAuB,GAAvB,CAAX;AAEAD,IAAAA,IAAI,CAACG,WAAL,CAAiBD,IAAjB,EAAuBE,SAAvB,GAAmC,cAAnC;AACAR,IAAAA,SAAS,CAACO,WAAV,CAAsBH,IAAtB,EAA4BI,SAA5B,GAAwC,yBAAxC;AACD;;AAED,QAAMC,UAAU,GAAGZ,QAAQ,CAACa,sBAAT,CAAgC,cAAhC,CAAnB;AACA,QAAMC,OAAO,GAAGd,QAAQ,CAACa,sBAAT,CAAgC,UAAhC,CAAhB;;AACA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,UAAU,CAACI,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1CH,IAAAA,UAAU,CAACG,CAAD,CAAV,CAAcX,KAAd,CAAoBN,OAApB,GAA+B,GAAEA,OAAQ,IAAzC;AAEAgB,IAAAA,OAAO,CAACC,CAAD,CAAP,CAAWX,KAAX,CAAiBL,QAAjB,GAA6B,GAAEA,QAAS,IAAxC;AACD;;AACD,MAAIkB,CAAC,GAAG,CAAR;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,UAAI,CAACD,CAAC,GAAGC,CAAL,IAAU,CAAV,IAAe,CAAnB,EAAsB;AACpBP,QAAAA,UAAU,CAACK,CAAD,CAAV,CAAcb,KAAd,CAAoBgB,eAApB,GAAsCzB,gBAAtC;AACAmB,QAAAA,OAAO,CAACG,CAAD,CAAP,CAAWb,KAAX,CAAiBiB,KAAjB,GAAyB1B,gBAAzB;AACAsB,QAAAA,CAAC;AACF,OAJD,MAIO;AACLL,QAAAA,UAAU,CAACK,CAAD,CAAV,CAAcb,KAAd,CAAoBgB,eAApB,GAAsC1B,gBAAtC;AACAoB,QAAAA,OAAO,CAACG,CAAD,CAAP,CAAWb,KAAX,CAAiBiB,KAAjB,GAAyB3B,gBAAzB;AACAuB,QAAAA,CAAC;AACF;AACF;AACF;AACF","sourcesContent":["const CELL_COLOR_WHITE = \"#fff\";\r\nconst CELL_COLOR_BLACK = \"#000000\";\r\n\r\nexport function board(SIZE) {\r\n  let padding = 7;\r\n  let fontSize = 18;\r\n\r\n  document.getElementById(\"Board\").innerHTML = \"\";\r\n  document.getElementById(\"Iterations\").innerHTML = \"\";\r\n\r\n  const container = document.getElementById(\"Board\");\r\n\r\n  container.style.setProperty(\"--Qgrid-rows\", SIZE);\r\n  container.style.setProperty(\"--Qgrid-cols\", SIZE);\r\n\r\n  for (let j = 0; j < SIZE * SIZE; j++) {\r\n    let cell = document.createElement(\"div\");\r\n    let item = document.createElement(\"i\");\r\n\r\n    cell.appendChild(item).className = \"fas fa-crown\";\r\n    container.appendChild(cell).className = \"Qgrid-item q-array-tile\";\r\n  }\r\n\r\n  const arrayTiles = document.getElementsByClassName(\"q-array-tile\");\r\n  const crownsI = document.getElementsByClassName(\"fa-crown\");\r\n  for (let l = 0; l < arrayTiles.length; l++) {\r\n    arrayTiles[l].style.padding = `${padding}px`;\r\n\r\n    crownsI[l].style.fontSize = `${fontSize}px`;\r\n  }\r\n  var c = 0;\r\n  for (var a = 0; a < 8; a++) {\r\n    for (var b = 0; b < 8; b++) {\r\n      if ((a + b) % 2 == 0) {\r\n        arrayTiles[c].style.backgroundColor = CELL_COLOR_BLACK;\r\n        crownsI[c].style.color = CELL_COLOR_BLACK;\r\n        c++;\r\n      } else {\r\n        arrayTiles[c].style.backgroundColor = CELL_COLOR_WHITE;\r\n        crownsI[c].style.color = CELL_COLOR_WHITE;\r\n        c++;\r\n      }\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}