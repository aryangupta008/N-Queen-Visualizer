{"ast":null,"code":"import { getNQueensAnimations } from \"../backTrackingAlgorithms\";\nvar ANIMATION_SPEED_SECONDS = 0.2;\nconst CROWN_COLOR = \"#0066CC\";\nconst SAFE = \"#2ECC71\";\nconst size = 8;\nexport function visualize() {\n  const arrayTiles = document.getElementsByClassName(\"q-array-tile\");\n  const crown = document.getElementsByClassName(\"fa-crown\");\n  const resultsDiv = document.getElementById(\"Iterations\");\n  const NQueensAnimations = [];\n  getNQueensAnimations(size, NQueensAnimations);\n  let count = 0;\n\n  for (let i = 0; i < NQueensAnimations.length; i++) {\n    count++;\n    const [row, col, isQueenSafe] = NQueensAnimations[i];\n    const idx = size * row + col;\n    let alert = document.createElement(\"div\");\n    alert.classList.add(\"alert\");\n    alert.classList.add(\"animate__animated\");\n    alert.classList.add(\"animate__slideInDown\");\n    setTimeout(() => {\n      if (isQueenSafe) {\n        arrayTiles[idx].classList.add(\"safe-queen\");\n        crown[idx].style.color = CROWN_COLOR;\n        crown[idx].classList.add(\"Queen\");\n        alert.innerHTML = `Trying Queen at row ${row} and col ${col}`;\n        alert.classList.add(\"alert-success\");\n      } else {\n        arrayTiles[idx].classList.remove(\"safe-queen\");\n\n        if (arrayTiles[idx].style.backgroundColor === \"rgb(0, 0, 0)\") {\n          crown[idx].style.color = \"#000000\";\n        } else {\n          crown[idx].style.color = \"#fff\";\n        }\n\n        crown[idx].classList.remove(\"Queen\");\n        alert.innerHTML = `row ${row} and col ${col} didn't work out. Backtracking`;\n        alert.classList.add(\"alert-danger\");\n      }\n\n      resultsDiv.prepend(alert);\n      arrayTiles[idx].style.transition = \"200ms all\";\n    }, ANIMATION_SPEED_SECONDS * 1000 * i);\n  }\n\n  const trueValues = document.getElementsByClassName(\"safe-queen\");\n  setTimeout(() => {\n    for (let i = 0; i < trueValues.length; i++) {\n      trueValues[i].style.backgroundColor = SAFE;\n      trueValues[i].style.transition = \"300ms all\";\n\n      if (i === trueValues.length - 1) {\n        let alert = document.createElement(\"div\");\n        alert.classList.add(\"alert\");\n        alert.classList.add(\"animate__animated\");\n        alert.classList.add(\"animate__slideInUp\");\n        alert.innerHTML = `All Queens have been placed on Valid positions`;\n        alert.classList.add(\"alert-primary\");\n        resultsDiv.prepend(alert);\n      }\n    }\n  }, (count + 1) * ANIMATION_SPEED_SECONDS * 1000);\n}","map":{"version":3,"sources":["C:/Users/suraj/Desktop/N-Queens-Visualizer-master/src/backTrackingAlgorithms/nQueens/visualization.js"],"names":["getNQueensAnimations","ANIMATION_SPEED_SECONDS","CROWN_COLOR","SAFE","size","visualize","arrayTiles","document","getElementsByClassName","crown","resultsDiv","getElementById","NQueensAnimations","count","i","length","row","col","isQueenSafe","idx","alert","createElement","classList","add","setTimeout","style","color","innerHTML","remove","backgroundColor","prepend","transition","trueValues"],"mappings":"AAAA,SAASA,oBAAT,QAAqC,2BAArC;AAEA,IAAIC,uBAAuB,GAAG,GAA9B;AACA,MAAMC,WAAW,GAAG,SAApB;AACA,MAAMC,IAAI,GAAG,SAAb;AACA,MAAMC,IAAI,GAAG,CAAb;AAEA,OAAO,SAASC,SAAT,GAAqB;AAC1B,QAAMC,UAAU,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,cAAhC,CAAnB;AAEA,QAAMC,KAAK,GAAGF,QAAQ,CAACC,sBAAT,CAAgC,UAAhC,CAAd;AAEA,QAAME,UAAU,GAAGH,QAAQ,CAACI,cAAT,CAAwB,YAAxB,CAAnB;AAEA,QAAMC,iBAAiB,GAAG,EAA1B;AACAZ,EAAAA,oBAAoB,CAACI,IAAD,EAAOQ,iBAAP,CAApB;AAEA,MAAIC,KAAK,GAAG,CAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,iBAAiB,CAACG,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;AACjDD,IAAAA,KAAK;AAEL,UAAM,CAACG,GAAD,EAAMC,GAAN,EAAWC,WAAX,IAA0BN,iBAAiB,CAACE,CAAD,CAAjD;AACA,UAAMK,GAAG,GAAGf,IAAI,GAAGY,GAAP,GAAaC,GAAzB;AAEA,QAAIG,KAAK,GAAGb,QAAQ,CAACc,aAAT,CAAuB,KAAvB,CAAZ;AACAD,IAAAA,KAAK,CAACE,SAAN,CAAgBC,GAAhB,CAAoB,OAApB;AACAH,IAAAA,KAAK,CAACE,SAAN,CAAgBC,GAAhB,CAAoB,mBAApB;AACAH,IAAAA,KAAK,CAACE,SAAN,CAAgBC,GAAhB,CAAoB,sBAApB;AAEAC,IAAAA,UAAU,CAAC,MAAM;AACf,UAAIN,WAAJ,EAAiB;AACfZ,QAAAA,UAAU,CAACa,GAAD,CAAV,CAAgBG,SAAhB,CAA0BC,GAA1B,CAA8B,YAA9B;AAEAd,QAAAA,KAAK,CAACU,GAAD,CAAL,CAAWM,KAAX,CAAiBC,KAAjB,GAAyBxB,WAAzB;AAEAO,QAAAA,KAAK,CAACU,GAAD,CAAL,CAAWG,SAAX,CAAqBC,GAArB,CAAyB,OAAzB;AAEAH,QAAAA,KAAK,CAACO,SAAN,GAAmB,uBAAsBX,GAAI,YAAWC,GAAI,EAA5D;AACAG,QAAAA,KAAK,CAACE,SAAN,CAAgBC,GAAhB,CAAoB,eAApB;AACD,OATD,MASO;AACLjB,QAAAA,UAAU,CAACa,GAAD,CAAV,CAAgBG,SAAhB,CAA0BM,MAA1B,CAAiC,YAAjC;;AAEA,YAAItB,UAAU,CAACa,GAAD,CAAV,CAAgBM,KAAhB,CAAsBI,eAAtB,KAA0C,cAA9C,EAA8D;AAC5DpB,UAAAA,KAAK,CAACU,GAAD,CAAL,CAAWM,KAAX,CAAiBC,KAAjB,GAAyB,SAAzB;AACD,SAFD,MAEO;AACLjB,UAAAA,KAAK,CAACU,GAAD,CAAL,CAAWM,KAAX,CAAiBC,KAAjB,GAAyB,MAAzB;AACD;;AAEDjB,QAAAA,KAAK,CAACU,GAAD,CAAL,CAAWG,SAAX,CAAqBM,MAArB,CAA4B,OAA5B;AAEAR,QAAAA,KAAK,CAACO,SAAN,GAAmB,OAAMX,GAAI,YAAWC,GAAI,gCAA5C;AACAG,QAAAA,KAAK,CAACE,SAAN,CAAgBC,GAAhB,CAAoB,cAApB;AACD;;AACDb,MAAAA,UAAU,CAACoB,OAAX,CAAmBV,KAAnB;AACAd,MAAAA,UAAU,CAACa,GAAD,CAAV,CAAgBM,KAAhB,CAAsBM,UAAtB,GAAmC,WAAnC;AACD,KA1BS,EA0BP9B,uBAAuB,GAAG,IAA1B,GAAiCa,CA1B1B,CAAV;AA2BD;;AAED,QAAMkB,UAAU,GAAGzB,QAAQ,CAACC,sBAAT,CAAgC,YAAhC,CAAnB;AAEAgB,EAAAA,UAAU,CAAC,MAAM;AACf,SAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkB,UAAU,CAACjB,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1CkB,MAAAA,UAAU,CAAClB,CAAD,CAAV,CAAcW,KAAd,CAAoBI,eAApB,GAAsC1B,IAAtC;AACA6B,MAAAA,UAAU,CAAClB,CAAD,CAAV,CAAcW,KAAd,CAAoBM,UAApB,GAAiC,WAAjC;;AAEA,UAAIjB,CAAC,KAAKkB,UAAU,CAACjB,MAAX,GAAoB,CAA9B,EAAiC;AAC/B,YAAIK,KAAK,GAAGb,QAAQ,CAACc,aAAT,CAAuB,KAAvB,CAAZ;AACAD,QAAAA,KAAK,CAACE,SAAN,CAAgBC,GAAhB,CAAoB,OAApB;AACAH,QAAAA,KAAK,CAACE,SAAN,CAAgBC,GAAhB,CAAoB,mBAApB;AACAH,QAAAA,KAAK,CAACE,SAAN,CAAgBC,GAAhB,CAAoB,oBAApB;AACAH,QAAAA,KAAK,CAACO,SAAN,GAAmB,gDAAnB;AACAP,QAAAA,KAAK,CAACE,SAAN,CAAgBC,GAAhB,CAAoB,eAApB;AAEAb,QAAAA,UAAU,CAACoB,OAAX,CAAmBV,KAAnB;AACD;AACF;AACF,GAhBS,EAgBP,CAACP,KAAK,GAAG,CAAT,IAAcZ,uBAAd,GAAwC,IAhBjC,CAAV;AAiBD","sourcesContent":["import { getNQueensAnimations } from \"../backTrackingAlgorithms\";\n\nvar ANIMATION_SPEED_SECONDS = 0.2;\nconst CROWN_COLOR = \"#0066CC\";\nconst SAFE = \"#2ECC71\";\nconst size = 8;\n\nexport function visualize() {\n  const arrayTiles = document.getElementsByClassName(\"q-array-tile\");\n\n  const crown = document.getElementsByClassName(\"fa-crown\");\n\n  const resultsDiv = document.getElementById(\"Iterations\");\n\n  const NQueensAnimations = [];\n  getNQueensAnimations(size, NQueensAnimations);\n\n  let count = 0;\n  for (let i = 0; i < NQueensAnimations.length; i++) {\n    count++;\n\n    const [row, col, isQueenSafe] = NQueensAnimations[i];\n    const idx = size * row + col;\n\n    let alert = document.createElement(\"div\");\n    alert.classList.add(\"alert\");\n    alert.classList.add(\"animate__animated\");\n    alert.classList.add(\"animate__slideInDown\");\n\n    setTimeout(() => {\n      if (isQueenSafe) {\n        arrayTiles[idx].classList.add(\"safe-queen\");\n\n        crown[idx].style.color = CROWN_COLOR;\n\n        crown[idx].classList.add(\"Queen\");\n\n        alert.innerHTML = `Trying Queen at row ${row} and col ${col}`;\n        alert.classList.add(\"alert-success\");\n      } else {\n        arrayTiles[idx].classList.remove(\"safe-queen\");\n\n        if (arrayTiles[idx].style.backgroundColor === \"rgb(0, 0, 0)\") {\n          crown[idx].style.color = \"#000000\";\n        } else {\n          crown[idx].style.color = \"#fff\";\n        }\n\n        crown[idx].classList.remove(\"Queen\");\n\n        alert.innerHTML = `row ${row} and col ${col} didn't work out. Backtracking`;\n        alert.classList.add(\"alert-danger\");\n      }\n      resultsDiv.prepend(alert);\n      arrayTiles[idx].style.transition = \"200ms all\";\n    }, ANIMATION_SPEED_SECONDS * 1000 * i);\n  }\n\n  const trueValues = document.getElementsByClassName(\"safe-queen\");\n\n  setTimeout(() => {\n    for (let i = 0; i < trueValues.length; i++) {\n      trueValues[i].style.backgroundColor = SAFE;\n      trueValues[i].style.transition = \"300ms all\";\n\n      if (i === trueValues.length - 1) {\n        let alert = document.createElement(\"div\");\n        alert.classList.add(\"alert\");\n        alert.classList.add(\"animate__animated\");\n        alert.classList.add(\"animate__slideInUp\");\n        alert.innerHTML = `All Queens have been placed on Valid positions`;\n        alert.classList.add(\"alert-primary\");\n\n        resultsDiv.prepend(alert);\n      }\n    }\n  }, (count + 1) * ANIMATION_SPEED_SECONDS * 1000);\n}\n"]},"metadata":{},"sourceType":"module"}