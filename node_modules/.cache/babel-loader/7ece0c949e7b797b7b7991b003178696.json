{"ast":null,"code":"function createBoard(size) {\n  const board = [];\n\n  for (let i = 0; i < size; i++) {\n    board.push(getRowsOfZeroes(size));\n  }\n\n  return board;\n}\n\nexport function getNQueensAnimations(size, animations = []) {\n  const board = createBoard(size);\n  solveNQueenUtil(board, 0, animations);\n  return board;\n}\n\nfunction solveNQueenUtil(board = [], col, animations = []) {\n  let N = board.length;\n  if (col >= N) return true;\n\n  for (let i = 0; i < N; i++) {\n    if (isSafe(board, i, col)) {\n      board[i][col] = true;\n      animations.push([i, col, true]);\n      if (solveNQueenUtil(board, col + 1, animations)) return true;\n      board[i][col] = false;\n      animations.push([i, col, false]);\n    }\n  }\n\n  return false;\n}\n\nfunction isSafe(board = [], row, col) {\n  let N = board.length;\n\n  for (let i = 0; i < col; i++) {\n    if (board[row][i] === true) {\n      return false;\n    }\n  }\n\n  for (let i = row, j = col; i >= 0 && j >= 0; i--, j--) {\n    if (board[i][j] === true) {\n      return false;\n    }\n  }\n\n  for (let i = row, j = col; j >= 0 && i < N; i++, j--) {\n    if (board[i][j] === true) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function getRowsOfZeroes(size) {\n  const row = [];\n\n  for (let i = 0; i < size; i++) {\n    row.push(false);\n  }\n\n  return row;\n}","map":{"version":3,"sources":["C:/Users/aryan/OneDrive/Documents/GitHub/N-Queen-Visualiser-GfG/src/backTrackingAlgorithms/backTrackingAlgorithms.js"],"names":["createBoard","size","board","i","push","getRowsOfZeroes","getNQueensAnimations","animations","solveNQueenUtil","col","N","length","isSafe","row","j"],"mappings":"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","sourcesContent":["function createBoard(size) {\r\n  const board = [];\r\n  for (let i = 0; i < size; i++) {\r\n    board.push(getRowsOfZeroes(size));\r\n  }\r\n  return board;\r\n}\r\n\r\nexport function getNQueensAnimations(size, animations = []) {\r\n  const board = createBoard(size);\r\n  solveNQueenUtil(board, 0, animations);\r\n  return board;\r\n}\r\n\r\nfunction solveNQueenUtil(board = [], col, animations = []) {\r\n  let N = board.length;\r\n\r\n  if (col >= N) return true;\r\n\r\n  for (let i = 0; i < N; i++) {\r\n    if (isSafe(board, i, col)) {\r\n      board[i][col] = true;\r\n      animations.push([i, col, true]);\r\n      if (solveNQueenUtil(board, col + 1, animations)) return true;\r\n      board[i][col] = false;\r\n      animations.push([i, col, false]);\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isSafe(board = [], row, col) {\r\n  let N = board.length;\r\n\r\n  for (let i = 0; i < col; i++) {\r\n    if (board[row][i] === true) {\r\n      return false;\r\n    }\r\n  }\r\n  for (let i = row, j = col; i >= 0 && j >= 0; i--, j--) {\r\n    if (board[i][j] === true) {\r\n      return false;\r\n    }\r\n  }\r\n  for (let i = row, j = col; j >= 0 && i < N; i++, j--) {\r\n    if (board[i][j] === true) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nexport function getRowsOfZeroes(size) {\r\n  const row = [];\r\n  for (let i = 0; i < size; i++) {\r\n    row.push(false);\r\n  }\r\n  return row;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}