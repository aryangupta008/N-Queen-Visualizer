{"ast":null,"code":"function createBoard(size){var board=[];for(var i=0;i<size;i++){board.push(getRowsOfZeroes(size));}return board;}export function getNQueensAnimations(size){var animations=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];var board=createBoard(size);solveNQueenUtil(board,0,animations);return board;}function solveNQueenUtil(){var board=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var col=arguments.length>1?arguments[1]:undefined;var animations=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];var N=board.length;if(col>=N)return true;for(var i=0;i<N;i++){if(isSafe(board,i,col)){board[i][col]=true;animations.push([i,col,true]);if(solveNQueenUtil(board,col+1,animations))return true;board[i][col]=false;animations.push([i,col,false]);}}return false;}function isSafe(){var board=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var row=arguments.length>1?arguments[1]:undefined;var col=arguments.length>2?arguments[2]:undefined;var N=board.length;for(var i=0;i<col;i++){if(board[row][i]===true){return false;}}for(var _i=row,j=col;_i>=0&&j>=0;_i--,j--){if(board[_i][j]===true){return false;}}for(var _i2=row,_j=col;_j>=0&&_i2<N;_i2++,_j--){if(board[_i2][_j]===true){return false;}}return true;}export function getRowsOfZeroes(size){var row=[];for(var i=0;i<size;i++){row.push(false);}return row;}","map":{"version":3,"sources":["C:/Users/aryan/OneDrive/Documents/GitHub/N-Queen-Visualiser-GfG/src/backTrackingAlgorithms/backTrackingAlgorithms.js"],"names":["createBoard","size","board","i","push","getRowsOfZeroes","getNQueensAnimations","animations","solveNQueenUtil","col","N","length","isSafe","row","j"],"mappings":"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","sourcesContent":["function createBoard(size) {\r\n  const board = [];\r\n  for (let i = 0; i < size; i++) {\r\n    board.push(getRowsOfZeroes(size));\r\n  }\r\n  return board;\r\n}\r\n\r\nexport function getNQueensAnimations(size, animations = []) {\r\n  const board = createBoard(size);\r\n  solveNQueenUtil(board, 0, animations);\r\n  return board;\r\n}\r\n\r\nfunction solveNQueenUtil(board = [], col, animations = []) {\r\n  let N = board.length;\r\n\r\n  if (col >= N) return true;\r\n\r\n  for (let i = 0; i < N; i++) {\r\n    if (isSafe(board, i, col)) {\r\n      board[i][col] = true;\r\n      animations.push([i, col, true]);\r\n      if (solveNQueenUtil(board, col + 1, animations)) return true;\r\n      board[i][col] = false;\r\n      animations.push([i, col, false]);\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isSafe(board = [], row, col) {\r\n  let N = board.length;\r\n\r\n  for (let i = 0; i < col; i++) {\r\n    if (board[row][i] === true) {\r\n      return false;\r\n    }\r\n  }\r\n  for (let i = row, j = col; i >= 0 && j >= 0; i--, j--) {\r\n    if (board[i][j] === true) {\r\n      return false;\r\n    }\r\n  }\r\n  for (let i = row, j = col; j >= 0 && i < N; i++, j--) {\r\n    if (board[i][j] === true) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nexport function getRowsOfZeroes(size) {\r\n  const row = [];\r\n  for (let i = 0; i < size; i++) {\r\n    row.push(false);\r\n  }\r\n  return row;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}